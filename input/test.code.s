# code generated by MiniCC
# architecture: MIPS32

.data

# string literals

# label refs

# integer literals

# arrays

.text

__init:
	# setup the stack
	lui $sp, 0x8000
	addi $sp, $sp, 0x0000

	# redirect to main function
	jal __main

	# make system call to terminate the program
	li $v0, 10
	syscall



	
__main: 
	addiu $sp, $sp, -52
	sw $s0, 8($sp)
	sw $s1, 12($sp)
	sw $s2, 16($sp)
	sw $s3, 20($sp)
	sw $s4, 24($sp)
	sw $s5, 28($sp)
	sw $s6, 32($sp)
	sw $s7, 36($sp)
	sw $fp, 40($sp)
	sw $gp, 44($sp)
	sw $ra, 48($sp)
	
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	jal __MARS_SCANF_I
	move $a0, $s0
	move $a1, $s1
	move $a2, $s2
	move $a3, $s3
	move $t0, $v0
	li $t1, 0
	move $t2, $sp
	add $t2, $t2, $t1
	sw $t0, 0($t2)
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	jal __MARS_SCANF_I
	move $a0, $s0
	move $a1, $s1
	move $a2, $s2
	move $a3, $s3
	move $t0, $v0
	li $t1, 4
	move $t2, $sp
	add $t2, $t2, $t1
	sw $t0, 0($t2)
	li $t1, 0
	move $t2, $sp
	add $t2, $t2, $t1
	lw $t0, 0($t2)
	li $t2, 4
	move $t3, $sp
	add $t3, $t3, $t2
	lw $t1, 0($t3)
	add $t0, $t0, $t1
	li $t1, 0
	move $t2, $sp
	add $t2, $t2, $t1
	sw $t0, 0($t2)
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	li $t2, 0
	move $t3, $sp
	add $t3, $t3, $t2
	lw $t1, 0($t3)
	move $a0, $t1
	jal __MARS_PRINTF_I
	move $a0, $s0
	move $a1, $s1
	move $a2, $s2
	move $a3, $s3
	move $t0, $v0
	li $t0, 0
	move $v0, $t0
	lw $s0, 8($sp)
	lw $s1, 12($sp)
	lw $s2, 16($sp)
	lw $s3, 20($sp)
	lw $s4, 24($sp)
	lw $s5, 28($sp)
	lw $s6, 32($sp)
	lw $s7, 36($sp)
	lw $fp, 40($sp)
	lw $gp, 44($sp)
	lw $ra, 48($sp)
	addiu $sp, $sp, 52
	jr $ra
	

__MARS_GETI:
	li $v0, 5
	syscall
	move $t0, $v0
	jr $ra


__MARS_PUTI:
	li $v0, 1
	syscall
	jr $ra


__MARS_PUTS:
	li $v0, 4
	syscall
	jr $ra

# EOF
